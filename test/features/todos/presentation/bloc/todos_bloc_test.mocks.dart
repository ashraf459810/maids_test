// Mocks generated by Mockito 5.4.4 from annotations
// in maids_test/test/features/todos/presentation/bloc/todos_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:maids_test/core/error/failures.dart' as _i5;
import 'package:maids_test/features/todos/data/models/todo_model.dart' as _i6;
import 'package:maids_test/features/todos/domain/entities/todo_entity.dart'
    as _i7;
import 'package:maids_test/features/todos/domain/usecases/todos_usecases.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TodosUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodosUseCase extends _i1.Mock implements _i3.TodosUseCase {
  MockTodosUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TodoModel>> fetchUserTodos(
          int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchUserTodos,
          [page],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.TodoModel>>.value(
            _FakeEither_0<_i5.Failure, _i6.TodoModel>(
          this,
          Invocation.method(
            #fetchUserTodos,
            [page],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.TodoModel>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.Todo>> addTodo(
    String? text,
    bool? completed,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTodo,
          [
            text,
            completed,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i7.Todo>>.value(
            _FakeEither_0<_i5.Failure, _i7.Todo>(
          this,
          Invocation.method(
            #addTodo,
            [
              text,
              completed,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.Todo>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.Todo>> updateTodo(
    int? id,
    bool? completed,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [
            id,
            completed,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i7.Todo>>.value(
            _FakeEither_0<_i5.Failure, _i7.Todo>(
          this,
          Invocation.method(
            #updateTodo,
            [
              id,
              completed,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.Todo>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.Todo>> deleteTodo(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i7.Todo>>.value(
            _FakeEither_0<_i5.Failure, _i7.Todo>(
          this,
          Invocation.method(
            #deleteTodo,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.Todo>>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i8.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i4.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
