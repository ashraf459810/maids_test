// Mocks generated by Mockito 5.4.4 from annotations
// in maids_test/test/features/todos/data/todos_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:maids_test/features/todos/data/datasources/todo_data_source.dart'
    as _i4;
import 'package:maids_test/features/todos/data/models/todo_model.dart' as _i2;
import 'package:maids_test/features/todos/domain/entities/todo_entity.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTodoModel_0 extends _i1.SmartFake implements _i2.TodoModel {
  _FakeTodoModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodo_1 extends _i1.SmartFake implements _i3.Todo {
  _FakeTodo_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TodoRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoRemoteDataSource extends _i1.Mock
    implements _i4.TodoRemoteDataSource {
  MockTodoRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.TodoModel> fetchUserTodos(int? page) => (super.noSuchMethod(
        Invocation.method(
          #fetchUserTodos,
          [page],
        ),
        returnValue: _i5.Future<_i2.TodoModel>.value(_FakeTodoModel_0(
          this,
          Invocation.method(
            #fetchUserTodos,
            [page],
          ),
        )),
      ) as _i5.Future<_i2.TodoModel>);

  @override
  _i5.Future<_i3.Todo> addTodo(
    String? text,
    bool? completed,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTodo,
          [
            text,
            completed,
          ],
        ),
        returnValue: _i5.Future<_i3.Todo>.value(_FakeTodo_1(
          this,
          Invocation.method(
            #addTodo,
            [
              text,
              completed,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Todo>);

  @override
  _i5.Future<_i3.Todo> updateTodo(
    int? id,
    bool? completed,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [
            id,
            completed,
          ],
        ),
        returnValue: _i5.Future<_i3.Todo>.value(_FakeTodo_1(
          this,
          Invocation.method(
            #updateTodo,
            [
              id,
              completed,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Todo>);

  @override
  _i5.Future<_i3.Todo> deleteTodo(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [id],
        ),
        returnValue: _i5.Future<_i3.Todo>.value(_FakeTodo_1(
          this,
          Invocation.method(
            #deleteTodo,
            [id],
          ),
        )),
      ) as _i5.Future<_i3.Todo>);
}
